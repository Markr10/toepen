using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using toepenTest.Connection;
using toepenTest.Json;

namespace toepenTest
{
    /// <summary>
    /// Interaction logic for Lobby.xaml
    /// </summary>
    public partial class Lobby : Window
    {
        private bool continueApp;

        public Lobby(Boolean isServer, String ipClient)
        {
            continueApp = false;

            // Make the cursor the Hand cursor when the mouse moves  
            // over the button.
            Cursor = Cursors.Hand;

            // Make the application start at the center of the screen
            WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            InitializeComponent();
            if (isServer)
            {
                Connection.Conn.StartConnectionForServer();
                ipServerLabel1.Visibility = System.Windows.Visibility.Visible;
                ipServerLabel2.Content = Conn.GetLocalIP();
                
                Connection.Conn.getServer().FourClients += new FourClientsEventHandler(makeStartVisible);
            }
            else
            {
                // Create an instance of the dialog
                ipServerLabel2.Content = ipClient;
                Connection.Conn.StartConnectionForClient(ipClient);

                Connection.Conn.getClient().StartGame += new StartGameEventHandler(startGame);
            }

            ipServerLabel2.Visibility = System.Windows.Visibility.Visible;
            Connection.Conn.getClient().PlayerAdded += new PlayerAddedEventHandler(makePlayerActive);
        }

        public void makePlayerActive(int indexOfNewPlayer)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayerAddedEventHandler(makePlayerActive), indexOfNewPlayer);
                return;
            }
            else
            {
                switch (indexOfNewPlayer)
                {
                    case 0: labelPlayer1.Content = "Player 1 online";
                        break;
                    case 1: labelPlayer2.Content = "Player 2 online";
                        break;
                    case 2: labelPlayer3.Content = "Player 3 online";
                        break;
                    case 3: labelPlayer4.Content = "Player 4 online";
                        break;
                }
            }
        }

        public void makeStartVisible()
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new FourClientsEventHandler(makeStartVisible));
                return;
            }
            else
            {
                // Unload event handler
                Connection.Conn.getServer().FourClients -= makeStartVisible;

                startButton.Visibility = Visibility.Visible;
            }
        }

        private void startGame(Message messageObj)
        {
            // Unload event handler
            Connection.Conn.getClient().StartGame -= startGame;

            MainWindow goToGame = new MainWindow(messageObj.Id);
            goToGame.Show();
            continueApp = true;
            this.Close();
        }

        private void newGame_Click(object sender, RoutedEventArgs e)
        {
            Conn.getServer().StartGame();
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            // Unload all loaded event handlers
            Connection.Conn.getClient().PlayerAdded -= new PlayerAddedEventHandler(makePlayerActive);

            if (!continueApp)
            {
                Environment.Exit(0);
            }
        }
    }
}
