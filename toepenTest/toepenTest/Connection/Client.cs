using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using toepenTest.Json;

namespace toepenTest.Connection
{
    // The delegate type for hooking up change notifications.
    public delegate void PlayerAddedEventHandler(int indexOfNewPlayer);
    public delegate void StartGameEventHandler(string playerName);
    public delegate void PlayerCardsEventHandler(PlayerCards playerCardsObj, object sender);
    public delegate void ReceivePlayedCardEventHandler(int cardField, String card);
    public delegate void MessageListEventHandler(String text);
    public delegate void ActivateCardsEventHandler(object sender);
    public delegate void PlayedCardValidEventHandler(bool cardValid, int indexOfCardField);
    public delegate void ScoreListEventHandler(String text);
    public delegate void ResetScoreListEventHandler(String text);
    //public delegate void DirtyLaundryEventHandler(object sender);
    public delegate void PlayerExtraCardsEventHandler(PlayerExtraCards playerExtraCardsObj);
    //public delegate void SetNewRoundEventHandler();
    public delegate void StartNewRoundEventHandler();
    public delegate void StartNewTrickEventHandler();

    public class Client
    {
        public event PlayerAddedEventHandler PlayerAddedEvent;
        public event StartGameEventHandler StartGameEvent;
        public event PlayerCardsEventHandler PlayerCardsEvent;
        public event ReceivePlayedCardEventHandler ReceivePlayedCardEvent;
        public event MessageListEventHandler MessageListEvent;
        public event ActivateCardsEventHandler ActivateCardsEvent;
        public event PlayedCardValidEventHandler PlayedCardValidEvent;
        public event ScoreListEventHandler ScoreListEvent;
        public event ResetScoreListEventHandler ResetScoreListEvent;
        //public event DirtyLaundryEventHandler DirtyLaundryEvent;
        public event PlayerExtraCardsEventHandler PlayerExtraCardsEvent;
        //public event SetNewRoundEventHandler SetNewRoundEvent;
        public event StartNewRoundEventHandler StartNewRoundEvent;
        public event StartNewTrickEventHandler StartNewTrickEvent;

        private TcpClient _client;
        private bool holdConnection;

        public Client(String ipAddress, int portNum)
        {
            _client = new TcpClient();
            _client.Connect(ipAddress, portNum);

            holdConnection = true;

            Thread recieveThread = new Thread(GetResponse);
            recieveThread.Start();
        }

        /// <summary>
        /// Player has joined the game!
        /// </summary>
        /// <param name="indexOfNewPlayer"></param>
        protected virtual void OnPlayerAdded(int indexOfNewPlayer)
        {
            if (PlayerAddedEvent != null)
            {
                PlayerAddedEvent(indexOfNewPlayer);
            }
        }

        /// <summary>
        /// On start game, go to the table
        /// </summary>
        /// <param name="playerName"></param>
        protected virtual void OnStartGame(string playerName)
        {
            if (StartGameEvent != null)
            {
                StartGameEvent(playerName);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="playerCardsObj"></param>
        /// <param name="sender"></param>
        protected virtual void OnPlayerCards(PlayerCards playerCardsObj, object sender)
        {
            if (PlayerCardsEvent != null)
            {
                PlayerCardsEvent(playerCardsObj, sender);
            }
        }

        /// <summary>
        /// A player has played a card
        /// </summary>
        /// <param name="cardField"></param>
        /// <param name="card"></param>
        protected virtual void OnReceivePlayedCardEvent(int cardField, String card)
        {
            if (ReceivePlayedCardEvent != null)
            {
                ReceivePlayedCardEvent(cardField, card);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="text"></param>
        protected virtual void OnMessageListEvent(String text)
        {
            if (MessageListEvent != null)
            {
                MessageListEvent(text);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="text"></param>
        protected virtual void OnScoreListEvent(String text)
        {
            if (ScoreListEvent != null)
            {
                ScoreListEvent(text);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="text"></param>
        protected virtual void OnResetScoreListEvent(String text)
        {
            if (ResetScoreListEvent != null)
            {
                ResetScoreListEvent(text);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="sender"></param>
        protected virtual void OnActivateCardsEvent(object sender)
        {
            if (ActivateCardsEvent != null)
            {
                ActivateCardsEvent(sender);
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        /// <param name="cardValid"></param>
        /// <param name="indexOfCardField"></param>
        protected virtual void OnPlayedCardValidEvent(bool cardValid, int indexOfCardField)
        {
            if (PlayedCardValidEvent != null)
            {
                PlayedCardValidEvent(cardValid, indexOfCardField);
            }
        }

        //protected virtual void OnDirtyLaundryEvent(object sender)
        //{
        //    if (DirtyLaundryEvent != null)
        //    {
        //        DirtyLaundryEvent(sender);
        //    }
        //}

        /// <summary>
        /// When dirty laundry is true
        /// </summary>
        /// <param name="playerExtraCardsObj"></param>
        protected virtual void OnPlayerExtraCards(PlayerExtraCards playerExtraCardsObj)
        {
            if (PlayerExtraCardsEvent != null)
            {
                PlayerExtraCardsEvent(playerExtraCardsObj);
            }
        }

        //protected virtual void OnSetNewRoundEvent()
        //{
        //    if (SetNewRoundEvent != null)
        //    {
        //        SetNewRoundEvent();
        //    }
        //}

        /// <summary>
        /// Starts after new round event
        /// </summary>
        protected virtual void OnStartNewRoundEvent()
        {
            if (StartNewRoundEvent != null)
            {
                StartNewRoundEvent();
            }
        }

        /// <summary>
        /// ???
        /// </summary>
        protected virtual void OnStartNewTrickEvent()
        {
            if (StartNewTrickEvent != null)
            {
                StartNewTrickEvent();
            }
        }

        /// <summary>
        /// Get response from server
        /// </summary>
        private void GetResponse()
        {
            StreamReader sReader = new StreamReader(_client.GetStream(), Encoding.ASCII);

            try
            {
                while (holdConnection)
                {
                    // if you want to receive anything
                    String sDataIncomming = sReader.ReadLine();
                    Console.WriteLine("Client recieved: " + sDataIncomming);
                    HandleResponse(sDataIncomming);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Connection with server is lost!; " + e);
                // terminate thread when connection is lost
            }
        }

        /// <summary>
        /// Handles responses from server
        /// </summary>
        /// <param name="sDataIncomming"></param>
        private void HandleResponse(String sDataIncomming)
        {
            switch (JsonConvert.DeserializeObject<Message>(sDataIncomming).Type)
            {
                case "PlayerAdded":
                    PlayerAdded playerAdded = JsonConvert.DeserializeObject<PlayerAdded>(sDataIncomming);
                    OnPlayerAdded(playerAdded.IndexOfNewPlayer);
                    break;
                case "StartGame":
                    StartGame startGame = JsonConvert.DeserializeObject<StartGame>(sDataIncomming);
                    OnStartGame(startGame.PlayerName);
                    break;
                case "PlayerCards":
                    PlayerCards playerCards = JsonConvert.DeserializeObject<PlayerCards>(sDataIncomming);
                    OnPlayerCards(playerCards, this);
                    break;
                case "PlayerPlayedCard":
                    PlayerPlayedCard playerPlayedCard = JsonConvert.DeserializeObject<PlayerPlayedCard>(sDataIncomming);
                    OnReceivePlayedCardEvent(playerPlayedCard.IndexOfCardField, playerPlayedCard.Card);
                    break;
                case "MessageToList":
                    MessageToList messageToList = JsonConvert.DeserializeObject<MessageToList>(sDataIncomming);
                    OnMessageListEvent(messageToList.Text);
                    break;
                case "ResetScoreToList":
                    ResetScoreToList resetScoreToList = JsonConvert.DeserializeObject<ResetScoreToList>(sDataIncomming);
                    OnResetScoreListEvent(resetScoreToList.Text);
                    break;
                case "ScoreToList":
                    ScoreToList scoreToList = JsonConvert.DeserializeObject<ScoreToList>(sDataIncomming);
                    OnScoreListEvent(scoreToList.Text);
                    break;
                case "PlayerTurn":
                    PlayerTurn playerTurn = JsonConvert.DeserializeObject<PlayerTurn>(sDataIncomming);
                    OnActivateCardsEvent(this);
                    break;
                case "PlayedCardValid":
                    PlayedCardValid playedCardValid = JsonConvert.DeserializeObject<PlayedCardValid>(sDataIncomming);
                    OnPlayedCardValidEvent(playedCardValid.CardValid, playedCardValid.IndexOfCardField);
                    break;
                //case "DirtyLaundry":
                //    //DirtyLaundry dirtyLaundry = JsonConvert.DeserializeObject<DirtyLaundry>(sDataIncomming);
                //    OnDirtyLaundryEvent(this);
                //    break;
                case "PlayerExtraCards":
                    PlayerExtraCards playerExtraCards = JsonConvert.DeserializeObject<PlayerExtraCards>(sDataIncomming);
                    OnPlayerExtraCards(playerExtraCards);
                    break;
                //case "SetNewRound":
                //    OnSetNewRoundEvent();
                //    break;
                case "StartNewRound":
                    OnStartNewRoundEvent();
                    break;
                case "StartNewTrick":
                    OnStartNewTrickEvent();
                    break;
            }
        }

        /// <summary>
        /// Send a message to the server in a separate thread
        /// </summary>
        /// <param name="messageObj">Must be a serialize Message object</param>
        public void SendMessage(object messageObj)
        {
            Thread sendThread = new Thread(Send);
            sendThread.Start(messageObj);
        }

        /// <summary>
        /// Send message to a server
        /// </summary>
        /// <param name="messageObj">Must be a serialize Message object</param>
        private void Send(object messageObj)
        {
            try
            {
                StreamWriter sWriter = new StreamWriter(_client.GetStream(), Encoding.ASCII);

                //String sData = null;

                // write data and make sure to flush, or the buffer will continue to 
                // grow, and your data might not be sent when you want it, and will
                // only be sent once the buffer is filled
                sWriter.WriteLine(messageObj);
                sWriter.Flush();
                Console.WriteLine("Client sent: " + messageObj);
            }
            catch (Exception e)
            {
                Console.WriteLine("Client can not send message " + messageObj + " to the server!; " + e);
            }
        }

        /// <summary>
        /// Send the card to server
        /// </summary>
        /// <param name="card"></param>
        public void SendCard(string card)
        {
            PlayedCard playedCard = new PlayedCard();
            playedCard.Card = card;
            SendMessage(JsonConvert.SerializeObject(playedCard));
        }

        /// <summary>
        /// There was dirty laundry, sending to server
        /// </summary>
        /// <param name="dirtyLaundry"></param>
        public void SendDirtyLaundry(bool dirtyLaundry)
        {
            DirtyLaundry checkDirtyLaundry = new DirtyLaundry();
            checkDirtyLaundry.CheckDirtyLaundry = dirtyLaundry;
            SendMessage(JsonConvert.SerializeObject(checkDirtyLaundry));
        }
    }
}
