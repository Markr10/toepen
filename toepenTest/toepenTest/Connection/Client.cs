using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using toepenTest.Json;

namespace toepenTest.Connection
{
    // The delegate type for hooking up change notifications.
    public delegate void PlayerAddedEventHandler(int indexOfNewPlayer);
    public delegate void StartGameEventHandler(StartGame startGameObj);
    public delegate void PlayerCardsEventHandler(PlayerCards messageObj);
    public delegate void ReceivePlayedCardEventHandler(int cardField, String card);
    public delegate void MessageListEventHandler(String text);
    public delegate void ActivateCardsEventHandler();

    public class Client
    {
        public event PlayerAddedEventHandler PlayerAddedEvent;
        public event StartGameEventHandler StartGameEvent;
        public event PlayerCardsEventHandler PlayerCardsEvent;
        public event ReceivePlayedCardEventHandler ReceivePlayedCardEvent;
        public event MessageListEventHandler MessageListEvent;
        public event ActivateCardsEventHandler ActivateCardsEvent;

        private TcpClient _client;
        private bool holdConnection;

        public Client(String ipAddress, int portNum)
        {
            _client = new TcpClient();
            _client.Connect(ipAddress, portNum);

            holdConnection = true;

            Thread recieveThread = new Thread(GetResponse);
            recieveThread.Start();
        }

        // Invoke the changed event; called whenever there are change notifications
        protected virtual void OnPlayerAdded(int indexOfNewPlayer)
        {
            if (PlayerAddedEvent != null)
            {
                PlayerAddedEvent(indexOfNewPlayer);
            }
        }

        protected virtual void OnStartGame(StartGame startGameObj)
        {
            if (StartGameEvent != null)
            {
                StartGameEvent(startGameObj);
            }
        }

        protected virtual void OnPlayerCards(PlayerCards playerCardsObj)
        {
            if (PlayerCardsEvent != null)
            {
                PlayerCardsEvent(playerCardsObj);
            }
        }

        protected virtual void OnReceivedPlayedCard(int cardField, String card)
        {
            if (ReceivePlayedCardEvent != null)
            {
                ReceivePlayedCardEvent(cardField, card);
            }
        }

        protected virtual void OnMessageListEvent(String text)
        {
            if (MessageListEvent != null)
            {
                MessageListEvent(text);
            }
        }

        protected virtual void OnActivateCardsEvent()
        {
            if (ActivateCardsEvent != null)
            {
                ActivateCardsEvent();
            }
        }

        private void GetResponse()
        {
            StreamReader sReader = new StreamReader(_client.GetStream(), Encoding.ASCII);

            try
            {
                while (holdConnection)
                {
                    // if you want to receive anything
                    String sDataIncomming = sReader.ReadLine();
                    Console.WriteLine("Client recieved: " + sDataIncomming);
                    HandleResponse(sDataIncomming);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Connection with server is lost!; " + e);
                // terminate thread when connection is lost
            }
        }

        private void HandleResponse(String sDataIncomming)
        {
            switch (JsonConvert.DeserializeObject<Message>(sDataIncomming).Type)
            {
                case "PlayerAdded":
                    PlayerAdded playerAdded = JsonConvert.DeserializeObject<PlayerAdded>(sDataIncomming);
                    OnPlayerAdded(playerAdded.IndexOfNewPlayer);
                    break;
                case "StartGame":
                    StartGame startGame = JsonConvert.DeserializeObject<StartGame>(sDataIncomming);
                    OnStartGame(startGame);
                    break;
                case "PlayerCards":
                    PlayerCards playerCards = JsonConvert.DeserializeObject<PlayerCards>(sDataIncomming);
                    OnPlayerCards(playerCards);
                    break;
                case "PlayerPlayedCard":
                    PlayerPlayedCard playerPlayedCard = JsonConvert.DeserializeObject<PlayerPlayedCard>(sDataIncomming);
                    OnReceivedPlayedCard(playerPlayedCard.IndexOfCardField, playerPlayedCard.Card);
                    break;
                case "MessageToList":
                    MessageToList messageToList = JsonConvert.DeserializeObject<MessageToList>(sDataIncomming);
                    OnMessageListEvent(messageToList.Text);
                    break;
                case "PlayerTurn":
                    PlayerTurn playerTurn = JsonConvert.DeserializeObject<PlayerTurn>(sDataIncomming);
                    OnActivateCardsEvent();
                    break;
            }
        }

        /// <summary>
        /// Send a message to the server in a separate thread
        /// </summary>
        /// <param name="messageObj">Must be a serialize Message object</param>
        public void SendMessage(object messageObj)
        {
            Thread sendThread = new Thread(Send);
            sendThread.Start(messageObj);
        }

        /// <summary>
        /// Send message to a server
        /// </summary>
        /// <param name="messageObj">Must be a serialize Message object</param>
        private void Send(object messageObj)
        {
            StreamWriter sWriter = new StreamWriter(_client.GetStream(), Encoding.ASCII);

            //String sData = null;

            // write data and make sure to flush, or the buffer will continue to 
            // grow, and your data might not be sent when you want it, and will
            // only be sent once the buffer is filled
            sWriter.WriteLine(messageObj);
            sWriter.Flush();
            Console.WriteLine("Client sent: " + messageObj);
        }

        public void SendCard(string card)
        {
            PlayedCard playedCard = new PlayedCard();
            playedCard.Card = card;
            SendMessage(JsonConvert.SerializeObject(playedCard));
        }
    }
}
