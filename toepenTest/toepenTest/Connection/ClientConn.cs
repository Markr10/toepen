using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using toepenTest.Json;
using toepenTest.Json.Value;

namespace toepenTest.Connection
{
    // A delegate type for hooking up change notifications.
    public delegate void StartGameEventHandler(Message e);

    public class ClientConn
    {
        public event StartGameEventHandler StartGame;

        private TcpClient _client;

        private StreamReader _sReader;
        private StreamWriter _sWriter;

        public ClientConn(String ipAddress, int portNum)
        {
            _client = new TcpClient();
            _client.Connect(ipAddress, portNum);

            Thread recieveThread = new Thread(getResponse);
            recieveThread.Start();
        }

        protected virtual void OnStartGame(Message messageObj)
        {
            if (StartGame != null)
            {
                StartGame(messageObj);
            }
        }

        public void HandleCommunication(Message messageObj)
        {
            Thread sendThread = new Thread(send);
            sendThread.Start(messageObj);
        }

        /// <summary>
        /// Send message to server.
        /// </summary>
        /// <param name="messageObj">Must be a Message object.</param>
        private void send(object messageObj)
        {
            _sReader = new StreamReader(_client.GetStream(), Encoding.ASCII);
            _sWriter = new StreamWriter(_client.GetStream(), Encoding.ASCII);

            //String sData = null;

            // write data and make sure to flush, or the buffer will continue to 
            // grow, and your data might not be sent when you want it, and will
            // only be sent once the buffer is filled.
            _sWriter.WriteLine(messageObj);
            _sWriter.Flush();
            Console.WriteLine("Client send: " + messageObj);
        }

        private void getResponse()
        {
            while (true)
            {
                try
                {
                    // if you want to receive anything
                    String sDataIncomming = _sReader.ReadLine();
                    Console.WriteLine("Client recieved: " + sDataIncomming);
                    handleResponse(sDataIncomming);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                }
            }
        }

        private void handleResponse(String sDataIncomming)
        {
            Message message = JsonConvert.DeserializeObject<Message>(sDataIncomming);

            switch (message.type)
            {
                case "startGame":
                    StartGame startGame = JsonConvert.DeserializeObject<StartGame>(message.value);
                    if (startGame.start)
                    {
                        OnStartGame(message);
                    }
                    break;
            }
        }
    }
}