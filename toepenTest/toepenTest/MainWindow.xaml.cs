using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using toepenTest.Connection;
using toepenTest.Json;


namespace toepenTest
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private bool continueApp;
        private string cardsToShow;
        private String[] dirtyLaundry = { "HA", "HK", "HQ", "HJ", "H7", "SA", "SK", "SQ", 
                                        "SJ", "S7", "KA", "KK", "KQ", "KJ", "K7", "RA", 
                                        "RK", "RQ", "RJ", "R7" };
        //private string dirtyLaundry;

        public MainWindow(string playerName)
        {
            //WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            InitializeComponent();

            continueApp = false;

            kaart1.IsEnabled = false;
            kaart2.IsEnabled = false;
            kaart3.IsEnabled = false;
            kaart4.IsEnabled = false;

            Conn.GetClient().PlayerCardsEvent += new PlayerCardsEventHandler(SetCardImages);
            Conn.GetClient().ReceivePlayedCardEvent += new ReceivePlayedCardEventHandler(SetCardField);
            Conn.GetClient().MessageListEvent += new MessageListEventHandler(AddMessageToListBox);
            Conn.GetClient().ActivateCardsEvent += new ActivateCardsEventHandler(ActivateCards);

            scoreList.Items.Add("---  Game gestart  ---");
            scoreList.Items.Add("Speler 1: 0 pt");
            scoreList.Items.Add("Speler 2: 0 pt");
            scoreList.Items.Add("Speler 3: 0 pt");
            scoreList.Items.Add("Speler 4: 0 pt");

            messageList.Items.Add("Welkom " + playerName + "!");
        }

        public void SetCardImages(PlayerCards playerCardsObj)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayerCardsEventHandler(SetCardImages), playerCardsObj);
                return;
            }
            else
            {
                //Conn.GetClient().PlayerCardsEvent -= new PlayerCardsEventHandler(SetCardImages);
                ChangeCardImage(1, playerCardsObj.Card1);
                ChangeCardImage(2, playerCardsObj.Card2);
                ChangeCardImage(3, playerCardsObj.Card3);
                ChangeCardImage(4, playerCardsObj.Card4);
            }
        }

        public void SetCardField(int cardField, String card)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ReceivePlayedCardEventHandler(SetCardField), cardField, card);
                return;
            }
            else
            {
                AddMessageToListBox("Speler speelt kaart");
                SetLegeKaart(card, cardField);
            }
        }
        
        public void AddMessageToListBox(String text)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new MessageListEventHandler(AddMessageToListBox), text);
                return;
            }
            else
            {
                messageList.Items.Add(text);
            }
        }

        public void ActivateCards()
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ActivateCardsEventHandler(ActivateCards));
                return;
            }
            else
            {
                messageList.Items.Add("Jij bent aan de beurt");
                kaart1.IsEnabled = true;
                kaart2.IsEnabled = true;
                kaart3.IsEnabled = true;
                kaart4.IsEnabled = true;
            }
        }

        private void ChangeCardImage(int card, String cardType)
        {
             
            //Load the image from local resource
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + cardType + ".png", UriKind.Absolute));

            switch (card)
            {
                case 1: kaart1Image.Source = bmp;
                    break;
                case 2: kaart2Image.Source = bmp;
                    break;
                case 3: kaart3Image.Source = bmp;
                    break;
                case 4: kaart4Image.Source = bmp;
                    break;
            }
        }

        public void AllCards(string card)
        {
            cardsToShow += card + "\r\n";
        }

        private void buttonStartNewGame_Click(object sender, RoutedEventArgs e)
        {
            //newGame = new Game();

            kaart1.IsEnabled = true;
            kaart2.IsEnabled = true;
            kaart3.IsEnabled = true;
            kaart4.IsEnabled = true;
            buttonStartNewGame.IsEnabled = false;
        }

        private void kaart1_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = kaart1Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            //SetLegeKaart(card[card.GetUpperBound(0)], 0);
            Console.WriteLine("testsendcard " + card);

            //make cardobject to send and send it
            Conn.GetClient().SendCard(card[card.GetUpperBound(0)]);
      
            //BitmapImage bmpLeeg = new BitmapImage(new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute));
            //kaart1Image.Source = bmpLeeg;
            kaart1.IsEnabled = false;
            kaart2.IsEnabled = false;
            kaart3.IsEnabled = false;
            kaart4.IsEnabled = false;
            buttonDirtyLaundry.IsEnabled = false;
        }

        private void kaart2_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = kaart2Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            //SetLegeKaart(card[card.GetUpperBound(0)], 0);

           //BitmapImage bmpLeeg = new BitmapImage(new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute));
           //kaart2Image.Source = bmpLeeg;

            kaart1.IsEnabled = false;
            kaart2.IsEnabled = false;
            kaart3.IsEnabled = false;
            kaart4.IsEnabled = false;

            //make cardobject to send and send it
            Conn.GetClient().SendCard(card[card.GetUpperBound(0)]);
        }

        private void kaart3_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = kaart3Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            //SetLegeKaart(card[card.GetUpperBound(0)], 0);

            //BitmapImage bmpLeeg = new BitmapImage(new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute));
            //kaart3Image.Source = bmpLeeg;

            kaart1.IsEnabled = false;
            kaart2.IsEnabled = false;
            kaart3.IsEnabled = false;
            kaart4.IsEnabled = false;
            //make cardobject to send and send it
            Conn.GetClient().SendCard(card[card.GetUpperBound(0)]);
        }

        private void kaart4_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = kaart4Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            //SetLegeKaart(card[card.GetUpperBound(0)], 0);

            //BitmapImage bmpLeeg = new BitmapImage(new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute));
            //kaart4Image.Source = bmpLeeg;

            kaart1.IsEnabled = false;
            kaart2.IsEnabled = false;
            kaart3.IsEnabled = false;
            kaart4.IsEnabled = false;
            //make cardobject to send and send it
            Conn.GetClient().SendCard(card[card.GetUpperBound(0)]);
        }

        private void SetLegeKaart(string card, int cardField)
        {
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + card, UriKind.Absolute));

            Console.WriteLine("Pad kaart " + bmp);

            switch (cardField)
            {
                case 0: legeKaart1.Source = bmp;
                    break;
                case 1: legeKaart2.Source = bmp;
                    break;
                case 2: legeKaart3.Source = bmp;
                    break;
                case 3: legeKaart4.Source = bmp;
                    break;
            }
            
        }

        private void buttonDirtyLaundry_Click(object sender, RoutedEventArgs e)
        {
            char[] delimiters = new char[] { '/', '.' };
            
            String image1SourcePath = kaart1Image.Source.ToString();
            String image2SourcePath = kaart2Image.Source.ToString();
            String image3SourcePath = kaart3Image.Source.ToString();
            String image4SourcePath = kaart4Image.Source.ToString();

            //Hierdoor houd je alleen de kaart over, dus zonder .png -> bijvoorbeeld "H9"
            string[] card1PNG = image1SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card2PNG = image2SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card3PNG = image3SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card4PNG = image4SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

            //if (newGame.checkVuileWas(card1PNG[4], card2PNG[4], card3PNG[4], card4PNG[4]))
            //{
            //    Console.WriteLine(true);
            //    newGame.dealExtraCards();
            //}
            //else
            //{
            //    Console.WriteLine(false);
            //}
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            if (!continueApp)
            {
                Environment.Exit(0);
            }
        }
    }
}
