using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using toepenTest.Connection;
using toepenTest.Json;


namespace toepenTest
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private bool continueApp;
        private string cardsToShow;
        private String[] vuileWas = { "HA", "HK", "HQ", "HJ", "H7", "SA", "SK", "SQ", 
                                        "SJ", "S7", "KA", "KK", "KQ", "KJ", "K7", "RA", 
                                        "RK", "RQ", "RJ", "R7" };
        //private string dirtyLaundry;
        //private PlayerClient playerClient;

        public MainWindow(string playerId)
        {
            //WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            InitializeComponent();

            continueApp = false;

            Kaart1.IsEnabled = false;
            Kaart2.IsEnabled = false;
            Kaart3.IsEnabled = false;
            Kaart4.IsEnabled = false;

            //playerClient = new PlayerClient(playerId);

            Conn.getClient().PlayerCardsEvent += new PlayerCardsEventHandler(setCardImages);
        }

        public void setCardImages(PlayerCards playerCardsObj)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayerCardsEventHandler(setCardImages), playerCardsObj);
                return;
            }
            else
            {
                Conn.getClient().PlayerCardsEvent -= new PlayerCardsEventHandler(setCardImages);
                changeCardImage(1, playerCardsObj.Card1);
                changeCardImage(2, playerCardsObj.Card2);
                changeCardImage(3, playerCardsObj.Card3);
                changeCardImage(4, playerCardsObj.Card4);

                Kaart1.IsEnabled = true;
                Kaart2.IsEnabled = true;
                Kaart3.IsEnabled = true;
                Kaart4.IsEnabled = true;
            }
        }
        public void changeCardImage(int card, String cardType)
        {
             
            //Load the image from local resource
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + cardType + ".png", UriKind.Absolute));

            switch (card)
            {
                case 1: Kaart1Image.Source = bmp;
                    break;
                case 2: Kaart2Image.Source = bmp;
                    break;
                case 3: Kaart3Image.Source = bmp;
                    break;
                case 4: Kaart4Image.Source = bmp;
                    break;
            }
        }

        public void allCards(string card)
        {
            cardsToShow += card + "\r\n";
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            //newGame = new Game();

            Kaart1.IsEnabled = true;
            Kaart2.IsEnabled = true;
            Kaart3.IsEnabled = true;
            Kaart4.IsEnabled = true;
            startNewGame.IsEnabled = false;
        }

        private void Kaart1_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = Kaart1Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            LegeKaart(card);
            Console.WriteLine("testsendcard " + card);

            //make cardobject to send and send it
            PlayedCard PlayedCard = new PlayedCard();
            PlayedCard.Id = System.Environment.MachineName;
            PlayedCard.Card = card[card.GetUpperBound(0)];
            Conn.getClient().SendMessage(JsonConvert.SerializeObject(PlayedCard));

            BitmapImage bmpLeeg = new BitmapImage(new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute));
            Kaart1Image.Source = bmpLeeg;
            Kaart1.IsEnabled = false;
            vuileWasKnop.IsEnabled = false;
           
        }

        private void Kaart2_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = Kaart2Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            LegeKaart(card);
            Kaart2.IsEnabled = false;

            //make cardobject to send and send it
            PlayedCard PlayedCard = new PlayedCard();
            PlayedCard.Id = System.Environment.MachineName;
            PlayedCard.Card = card[card.GetUpperBound(0)];
            Conn.getClient().SendMessage(JsonConvert.SerializeObject(PlayedCard));

        }

        private void Kaart3_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = Kaart3Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            LegeKaart(card);

            Kaart3.IsEnabled = false;
            //make cardobject to send and send it
            PlayedCard PlayedCard = new PlayedCard();
            PlayedCard.Id = System.Environment.MachineName;
            PlayedCard.Card = card[card.GetUpperBound(0)];
            Conn.getClient().SendMessage(JsonConvert.SerializeObject(PlayedCard));
        }

        private void Kaart4_Click(object sender, RoutedEventArgs e)
        {
            String imageSourcePath = Kaart4Image.Source.ToString();
            String[] card = Regex.Split(imageSourcePath, "/");
            Console.WriteLine(card[card.GetUpperBound(0)]);
            LegeKaart(card);

            Kaart4.IsEnabled = false;
            //make cardobject to send and send it
            PlayedCard PlayedCard = new PlayedCard();
            PlayedCard.Id = System.Environment.MachineName;
            PlayedCard.Card = card[card.GetUpperBound(0)];
            Conn.getClient().SendMessage(JsonConvert.SerializeObject(PlayedCard));
        }

        private void LegeKaart(string[] card)
        {
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + card[card.GetUpperBound(0)], UriKind.Absolute));

            Console.WriteLine("TEST " + bmp);
            Legekaart1.Source = bmp;

            
        }

        private void Vuile_Was(object sender, RoutedEventArgs e)
        {
            char[] delimiters = new char[] { '/', '.' };
            
            String image1SourcePath = Kaart1Image.Source.ToString();
            String image2SourcePath = Kaart2Image.Source.ToString();
            String image3SourcePath = Kaart3Image.Source.ToString();
            String image4SourcePath = Kaart4Image.Source.ToString();

            //Hierdoor houd je alleen de kaart over, dus zonder .png -> bijvoorbeeld "H9"
            string[] card1PNG = image1SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card2PNG = image2SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card3PNG = image3SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            string[] card4PNG = image4SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

            //if (newGame.checkVuileWas(card1PNG[4], card2PNG[4], card3PNG[4], card4PNG[4]))
            //{
            //    Console.WriteLine(true);
            //    newGame.dealExtraCards();
            //}
            //else
            //{
            //    Console.WriteLine(false);
            //}
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            if (!continueApp)
            {
                Environment.Exit(0);
            }
        }
    }
}
