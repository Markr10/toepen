using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using toepenTest.Connection;
using toepenTest.Json;


namespace toepenTest
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        // Also in MainWindow.xaml
        private static readonly Uri NO_CARD_URI = new Uri("pack://application:,,,/resources/images/legekaart.png", UriKind.Absolute);

        private bool continueApp;
        private string cardsToShow;

        public MainWindow(string playerName)
        {
            //WindowStartupLocation = System.Windows.WindowStartupLocation.CenterScreen;
            InitializeComponent();

            continueApp = false;

            Conn.GetClient().MessageListEvent += new MessageListEventHandler(AddMessageToListBox);

            CheckAndPrepareNewTrickOrRound(false);

            messageList.Items.Add("Welkom " + playerName + "!");
        }

        public void SetCardImages(PlayerCards playerCardsObj)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayerCardsEventHandler(SetCardImages), playerCardsObj);
                return;
            }
            else
            {
                // TODO Checken of methode niet vastloopt wanneer er geen event aangekoppeld is
                Conn.GetClient().PlayerCardsEvent -= new PlayerCardsEventHandler(SetCardImages);

                ChangeCardImage(1, playerCardsObj.Card1);
                ChangeCardImage(2, playerCardsObj.Card2);
                ChangeCardImage(3, playerCardsObj.Card3);
                ChangeCardImage(4, playerCardsObj.Card4);

                CheckDirtyLaundry(null);
            }
        }

        public void CheckDirtyLaundry(object sender)
        {
            //if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            //{
            //    Dispatcher.Invoke(new DirtyLaundryEventHandler(CheckDirtyLaundry));
            //    return;
            //}
            //else
            //{
            // REMARK Mogelijk geen event aangekoppelt
            //    Conn.GetClient().DirtyLaundryEvent -= new DirtyLaundryEventHandler(CheckDirtyLaundry);

                if (MessageBox.Show("Wilt u vuile was melden?", "Vuile was", MessageBoxButton.YesNo, MessageBoxImage.None, MessageBoxResult.No) == MessageBoxResult.No)
                {
                    // No dirty laundry
                    Conn.GetClient().SendDirtyLaundry(false);
                }
                else
                {
                    // REMARK Mogelijk geen event aangekoppelt
                    //Conn.GetClient().DirtyLaundryEvent += new DirtyLaundryEventHandler(CheckDirtyLaundry);
                    // Dirty laundry
                    Conn.GetClient().PlayerExtraCardsEvent += new PlayerExtraCardsEventHandler(SetExtraCards);
                    Conn.GetClient().SendDirtyLaundry(true);
                }
            //}
        }

        public void SetExtraCards(PlayerExtraCards playerExtraCardsObj)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayerExtraCardsEventHandler(SetCardImages), playerExtraCardsObj);
                return;
            }
            else
            {
                // REMARK Mogelijk geen event aangekoppelt
                Conn.GetClient().PlayerExtraCardsEvent -= new PlayerExtraCardsEventHandler(SetExtraCards);
                                
                if (playerExtraCardsObj.PlayerGetExtraCards)
                {
                    SetCardImages(playerExtraCardsObj);
                    AddMessageToListBox("Je hebt nieuwe kaarten gekregen.");
                }
                else
                {
                    AddMessageToListBox("Er zijn geen kaarten meer beschikbaar.");
                }
            }
        }

        public void SetCardField(int cardField, String card)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ReceivePlayedCardEventHandler(SetCardField), cardField, card);
                return;
            }
            else
            {
                AddMessageToListBox("Speler speelt kaart");
                SetLegeKaart(cardField, card);
                CheckAndPrepareNewTrickOrRound(true);
            }
        }
        
        public void AddMessageToListBox(String text)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new MessageListEventHandler(AddMessageToListBox), text);
                return;
            }
            else
            {
                messageList.Items.Add(text);
            }
        }

        public void ResetAndAddScoreToListBox(String text)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ResetScoreListEventHandler(ResetAndAddScoreToListBox), text);
                return;
            }
            else
            {
                Conn.GetClient().ResetScoreListEvent -= new ResetScoreListEventHandler(ResetAndAddScoreToListBox);
                scoreList.Items.Clear();
                AddScoreToListBox(text);
            }
        }

        public void AddScoreToListBox(String text)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ScoreListEventHandler(AddScoreToListBox), text);
                return;
            }
            else
            {
                scoreList.Items.Add(text);
            }
        }

        public void ActivateCards(object sender)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new ActivateCardsEventHandler(ActivateCards), sender);
                return;
            }
            else
            {
                // TODO Check if no eventhandler is active in case of null value of sender
                if (sender != null)
                {
                    Conn.GetClient().ActivateCardsEvent -= new ActivateCardsEventHandler(ActivateCards);
                    messageList.Items.Add("Jij bent aan de beurt.");
                }
                ChangeActiveStatusCards();
            }
        }

        private void HandleValidCard(bool cardValid, int indexOfCardField)
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new PlayedCardValidEventHandler(HandleValidCard), cardValid, indexOfCardField);
                return;
            }
            else
            {
                Conn.GetClient().PlayedCardValidEvent -= new PlayedCardValidEventHandler(HandleValidCard);

                if (cardValid)
                {
                    MoveCard(indexOfCardField);
                    Conn.GetClient().ActivateCardsEvent += new ActivateCardsEventHandler(ActivateCards);
                    CheckAndPrepareNewTrickOrRound(true);
                }
                else
                {
                    messageList.Items.Add("Je moet een andere kaart opgooien.");
                    ActivateCards(null);
                }
            }
        }

        //public void SetNewRound()
        //{
        //    if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
        //    {
        //        Dispatcher.Invoke(new SetNewRoundEventHandler(SetNewRound));
        //        return;
        //    }
        //    else
        //    {
        //        Conn.GetClient().SetNewRoundEvent -= new SetNewRoundEventHandler(SetNewRound);

        //        Conn.GetClient().StartNewRoundEvent += new StartNewRoundEventHandler(StartNewRound);

        //    }
        //}

        public void StartNewRound()
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new StartNewRoundEventHandler(StartNewRound));
                return;
            }
            else
            {
                Conn.GetClient().StartNewRoundEvent -= new StartNewRoundEventHandler(StartNewRound);
                Conn.GetClient().ScoreListEvent -= new ScoreListEventHandler(AddScoreToListBox);

                Conn.GetClient().ActivateCardsEvent += new ActivateCardsEventHandler(ActivateCards);
                Conn.GetClient().ReceivePlayedCardEvent += new ReceivePlayedCardEventHandler(SetCardField);
            }
        }

        public void ResetOtherPlayerCards()
        {
            if (!Dispatcher.CheckAccess()) // CheckAccess returns true if you're on the dispatcher thread
            {
                Dispatcher.Invoke(new StartNewTrickEventHandler(ResetOtherPlayerCards));
                return;
            }
            else
            {
                Conn.GetClient().StartNewTrickEvent -= new StartNewTrickEventHandler(ResetOtherPlayerCards);

                BitmapImage bmpLeeg = new BitmapImage(NO_CARD_URI);
                legeKaart1.Source = bmpLeeg;
                legeKaart2.Source = bmpLeeg;
                legeKaart3.Source = bmpLeeg;
                legeKaart4.Source = bmpLeeg;
            }
        }


        public void AllCards(string card)
        {
            cardsToShow += card + "\r\n";
        }

        private void HandleClickOnKaart(string imageSourcePath)
        {
            ChangeActiveStatusCards();

            Conn.GetClient().PlayedCardValidEvent += new PlayedCardValidEventHandler(HandleValidCard);
            Conn.GetClient().SendCard(GetCardFromImageSourcePath(imageSourcePath));
        }

        /// <summary>
        /// Enables or disable not played cards
        /// </summary>
        /// <returns>How much card are enabled or disabled</returns>
        private void ChangeActiveStatusCards()
        {
            if (!kaart1Image.Source.ToString().Equals(NO_CARD_URI.ToString()))
            {
                kaart1.IsEnabled = !kaart1.IsEnabled;
            }
            if (!kaart2Image.Source.ToString().Equals(NO_CARD_URI.ToString()))
            {
                kaart2.IsEnabled = !kaart2.IsEnabled;
            }
            if (!kaart3Image.Source.ToString().Equals(NO_CARD_URI.ToString()))
            {
                kaart3.IsEnabled = !kaart3.IsEnabled;
            }
            if (!kaart4Image.Source.ToString().Equals(NO_CARD_URI.ToString()))
            {
                kaart4.IsEnabled = !kaart4.IsEnabled;
            }
        }

        private void CheckAndPrepareNewTrickOrRound(bool notFirstRun)
        {
            // Return if current trick is not completed
            if (legeKaart1.Source.ToString().Equals(NO_CARD_URI.ToString()) || legeKaart2.Source.ToString().Equals(NO_CARD_URI.ToString()) ||
                    legeKaart3.Source.ToString().Equals(NO_CARD_URI.ToString()) || legeKaart4.Source.ToString().Equals(NO_CARD_URI.ToString()))
            {
                return;
            }
            else
            {
                Conn.GetClient().StartNewTrickEvent += new StartNewTrickEventHandler(ResetOtherPlayerCards);
                
                // If it is a new trick then check if it is also a new round
                if (!kaart1Image.Source.ToString().Equals(NO_CARD_URI.ToString()) && !kaart2Image.Source.ToString().Equals(NO_CARD_URI.ToString()) &&
                        !kaart3Image.Source.ToString().Equals(NO_CARD_URI.ToString()) && !kaart4Image.Source.ToString().Equals(NO_CARD_URI.ToString()))
                {
                    PrepareNewRound(notFirstRun);
                }
            }
        }

        private void PrepareNewRound(bool notFirstRun)
        {
            // Unload events that are not possible at this moment
            if (notFirstRun)
            {
                Conn.GetClient().ActivateCardsEvent -= new ActivateCardsEventHandler(ActivateCards);
                Conn.GetClient().ReceivePlayedCardEvent -= new ReceivePlayedCardEventHandler(SetCardField);
            }

            Conn.GetClient().ResetScoreListEvent += new ResetScoreListEventHandler(ResetAndAddScoreToListBox);
            Conn.GetClient().ScoreListEvent += new ScoreListEventHandler(AddScoreToListBox);
            Conn.GetClient().PlayerCardsEvent += new PlayerCardsEventHandler(SetCardImages);
            //Conn.GetClient().SetNewRoundEvent += new SetNewRoundEventHandler(SetNewRound);
            Conn.GetClient().StartNewRoundEvent += new StartNewRoundEventHandler(StartNewRound);
        }

        private string GetCardFromImageSourcePath(string imageSourcePath)
        {
            if (!String.IsNullOrEmpty(imageSourcePath))
            {
                string[] card = Regex.Split(imageSourcePath, "/");
                Console.WriteLine(card[card.GetUpperBound(0)]);
                return card[card.GetUpperBound(0)];
            }
            else
            {
                return null;
            }
        }

        private void MoveCard(int indexOfCardField)
        {
            string imageSourcePath = String.Empty;
            switch (indexOfCardField)
            {
                case 0: imageSourcePath = kaart1Image.Source.ToString();
                    break;
                case 1: imageSourcePath = kaart2Image.Source.ToString();
                    break;
                case 2: imageSourcePath = kaart3Image.Source.ToString();
                    break;
                case 3: imageSourcePath = kaart4Image.Source.ToString();
                    break;
            }

            string card = GetCardFromImageSourcePath(imageSourcePath);
            if(!String.IsNullOrEmpty(card))
            {
                BitmapImage bmpLeeg = new BitmapImage(NO_CARD_URI);
                switch (indexOfCardField)
                {
                    case 0: kaart1Image.Source = bmpLeeg;
                        break;
                    case 1: kaart2Image.Source = bmpLeeg;
                        break;
                    case 2: kaart3Image.Source = bmpLeeg;
                        break;
                    case 3: kaart4Image.Source = bmpLeeg;
                        break;
                }

                SetLegeKaart(0, card);
            }
        }

        private void ChangeCardImage(int card, String cardType)
        {
            //Load the image from local resource
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + cardType + ".png", UriKind.Absolute));

            switch (card)
            {
                case 1: kaart1Image.Source = bmp;
                    break;
                case 2: kaart2Image.Source = bmp;
                    break;
                case 3: kaart3Image.Source = bmp;
                    break;
                case 4: kaart4Image.Source = bmp;
                    break;
            }
        }

        private void SetLegeKaart(int indexOfCardField, string card)
        {
            BitmapImage bmp = new BitmapImage(new Uri("pack://application:,,,/resources/images/" + card, UriKind.Absolute));

            Console.WriteLine("Bestandspad voor veranderen van lege kaart " + bmp);

            switch (indexOfCardField)
            {
                case 0: legeKaart1.Source = bmp;
                    break;
                case 1: legeKaart2.Source = bmp;
                    break;
                case 2: legeKaart3.Source = bmp;
                    break;
                case 3: legeKaart4.Source = bmp;
                    break;
            }
        }

        private void kaart1_Click(object sender, RoutedEventArgs e)
        {
            HandleClickOnKaart(kaart1Image.Source.ToString());
        }

        private void kaart2_Click(object sender, RoutedEventArgs e)
        {
            HandleClickOnKaart(kaart2Image.Source.ToString());
        }

        private void kaart3_Click(object sender, RoutedEventArgs e)
        {
            HandleClickOnKaart(kaart3Image.Source.ToString());
        }

        private void kaart4_Click(object sender, RoutedEventArgs e)
        {
            HandleClickOnKaart(kaart4Image.Source.ToString());
        }

        private void buttonStartNewGame_Click(object sender, RoutedEventArgs e)
        {
            ////newGame = new Game();
            //buttonStartNewGame.IsEnabled = false;
        }

        private void buttonDirtyLaundry_Click(object sender, RoutedEventArgs e)
        {
            //char[] delimiters = new char[] { '/', '.' };
            
            //string image1SourcePath = kaart1Image.Source.ToString();
            //string image2SourcePath = kaart2Image.Source.ToString();
            //string image3SourcePath = kaart3Image.Source.ToString();
            //string image4SourcePath = kaart4Image.Source.ToString();

            ////Hierdoor houd je alleen de kaart over, dus zonder .png -> bijvoorbeeld "H9"
            //string[] card1PNG = image1SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            //string[] card2PNG = image2SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            //string[] card3PNG = image3SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            //string[] card4PNG = image4SourcePath.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);

            ////if (newGame.checkVuileWas(card1PNG[4], card2PNG[4], card3PNG[4], card4PNG[4]))
            ////{
            ////    Console.WriteLine(true);
            ////    newGame.dealExtraCards();
            ////}
            ////else
            ////{
            ////    Console.WriteLine(false);
            ////}
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            if (!continueApp)
            {
                Environment.Exit(0);
            }
        }
    }
}
