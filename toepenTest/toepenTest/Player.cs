using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace toepenTest
{
    public class Player
    {
        private String name;
        private int clientId;
        private List<Card> cardObjects;
        private int penaltyPoints;
        private Card lastPlayedCard;

        public Player(String name, int clientId)
        {
            this.name = name;
            this.clientId = clientId;
            cardObjects = new List<Card>();
            ResetPenaltyPoints();
            lastPlayedCard = null;
        }

        public void ResetPenaltyPoints()
        {
            penaltyPoints = 0;
        }

        public void IncreasePenaltyPoints()
        {
            penaltyPoints++;
        }

        public String GetName()
        {
            return name;
        }

        public int GetClientId()
        {
            return clientId;
        }

        public Card GetCard(String card)
        {
            foreach (Card cardObject in cardObjects)
            {
                if(cardObject.ToString().Equals(card))
                {
                    return cardObject;
                }
            }
            return null;
        }

        //public int GetCardIndex(String card)
        //{
        //    return cardObjects.IndexOf(GetCard(card));
        //}

        public Card[] GetCards()
        {
            return cardObjects.ToArray();
        }

        public Card GetLastPlayedCard()
        {
            return lastPlayedCard;
        }

        public void SetCard(Card card)
        {
            cardObjects.Add(card);
            Console.WriteLine(name + ": " + card);
        }

        public int RemoveCard(String card)
        {
            Card cardObject = GetCard(card);
            int oldCardIndex = cardObjects.IndexOf(cardObject);

            if (cardObject != null && cardObjects.Remove(cardObject))
            {
                lastPlayedCard = cardObject;
                return oldCardIndex;
            }
            return -1;
        }
    }
}
