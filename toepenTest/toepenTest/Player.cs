using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace toepenTest
{
    public class Player
    {
        private String name;
        private int clientId;
        private Dictionary<Card, int> cardObjects; // use Dictionary for keeping the index
        private int penaltyPoints;
        private Card lastPlayedCard;

        public Player(String name, int clientId)
        {
            this.name = name;
            this.clientId = clientId;
            cardObjects = new Dictionary<Card, int>();
            ResetPenaltyPoints();
            lastPlayedCard = null;
        }

        /// <summary>
        /// Resetting penalty points
        /// </summary>
        public void ResetPenaltyPoints()
        {
            penaltyPoints = 0;
        }

        /// <summary>
        /// Increase penalty points
        /// </summary>
        public void IncreasePenaltyPoints()
        {
            penaltyPoints++;
        }

        /// <summary>
        /// Get name of player
        /// </summary>
        /// <returns></returns>
        public String GetName()
        {
            return name;
        }

        /// <summary>
        /// Get name of player with first letter uppercase
        /// </summary>
        /// <returns></returns>
        public String GetNameWithFirstUppercase()
        {
            if (String.IsNullOrEmpty(name))
            {
                throw new ArgumentException("Player has no name!");
            }

            return name.First().ToString().ToUpper() + String.Join("", name.Skip(1));
        }

        /// <summary>
        /// Get penalty points of player
        /// </summary>
        /// <returns></returns>
        public int GetPenaltyPoints()
        {
            return penaltyPoints;
        }

        /// <summary>
        /// Get client id of player
        /// </summary>
        /// <returns></returns>
        public int GetClientId()
        {
            return clientId;
        }

        /// <summary>
        /// Get a card of player
        /// </summary>
        /// <param name="card"></param>
        /// <returns></returns>
        public Card GetCard(String card)
        {
            foreach (Card cardObject in cardObjects.Keys)
            {
                if(cardObject.ToString().Equals(card))
                {
                    return cardObject;
                }
            }
            return null;
        }

        //public int GetCardIndex(String card)
        //{
        //    return cardObjects.IndexOf(GetCard(card));
        //}

        /// <summary>
        /// Get cards of player
        /// </summary>
        /// <returns></returns>
        public Card[] GetCards()
        {
            return cardObjects.Keys.ToArray();
        }

        /// <summary>
        /// Reset cards of player after a round
        /// </summary>
        public void ResetCards()
        {
            cardObjects.Clear();
        }

        /// <summary>
        /// Get last played card, for calculationg the points
        /// </summary>
        /// <returns></returns>
        public Card GetLastPlayedCard()
        {
            return lastPlayedCard;
        }

        /// <summary>
        /// Set card to the table
        /// </summary>
        /// <param name="card"></param>
        public void SetCard(Card card)
        {
            cardObjects.Add(card, (cardObjects.Count == 0 ? 0 : (cardObjects.Values.ElementAt(cardObjects.Count - 1) + 1)));
            Console.WriteLine(name + ": " + card);
        }

        /// <summary>
        /// Remove card from array after played to table
        /// </summary>
        /// <param name="card"></param>
        /// <returns></returns>
        public int RemoveCard(String card)
        {
            Card cardObject = GetCard(card);

            if (cardObject != null)
            {
                int cardIndex = cardObjects[cardObject];
                if (cardObjects.Remove(cardObject))
                {
                    lastPlayedCard = cardObject;
                    return cardIndex;
                }
            }
            return -1;
        }
    }
}
