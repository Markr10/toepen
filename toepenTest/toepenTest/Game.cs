using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;

namespace toepenTest
{
    class Game
    {
        private Dictionary<String, Player> players;
        private static Random _random = new Random();
        private List<Card> cardObject;
        private int countVuileWasKaart = 0;

        private List<Card> kaartenRandom;
        private List<Card> kaartenList;

        /// <summary>
        /// Constructor, roept de methodes aan om kaarten aan te maken, players toe te voegen en kaarten te delen
        /// </summary>
        /// <param name="p">Parent</param>
        public Game(int numberOfPlayers)
        {
            players = new Dictionary<string, Player>();
            cardObject = new List<Card>();
            addCard();
            addPlayers(numberOfPlayers);
            dealCards(4);
        }

        /// <summary>
        /// Voegt spelers toe aan de dictionary players
        /// </summary>
        public void addPlayers(int numberOfPlayers)
        {
            for (int i = 1; i <= numberOfPlayers; i++)
            {
                string playerId = "Player" + i;
                players.Add(playerId, new Player(playerId));
            }
        }

        public string[] getPlayerIDs()
        {
            string[] playerIDs = new string[players.Count];
            for (int i = 1; i <= players.Count(); i++)
            {
                playerIDs[i-1] = players["Player" + i].getPlayerName();
            }
            return playerIDs;
        }

        /// <summary>
        /// Voegt kaart objecten toe aan een list
        /// </summary>
        public void addCard()
        {
            cardObject.Add(new Card("HA"));
            cardObject.Add(new Card("HK"));
            cardObject.Add(new Card("HQ"));
            cardObject.Add(new Card("HJ"));
            cardObject.Add(new Card("H7"));
            cardObject.Add(new Card("H8"));
            cardObject.Add(new Card("H9"));
            cardObject.Add(new Card("H10"));
            cardObject.Add(new Card("SA"));
            cardObject.Add(new Card("SK"));
            cardObject.Add(new Card("SQ"));
            cardObject.Add(new Card("SJ"));
            cardObject.Add(new Card("S7"));
            cardObject.Add(new Card("S8"));
            cardObject.Add(new Card("S9"));
            cardObject.Add(new Card("S10"));
            cardObject.Add(new Card("RA"));
            cardObject.Add(new Card("RK"));
            cardObject.Add(new Card("RQ"));
            cardObject.Add(new Card("RJ"));
            cardObject.Add(new Card("R7"));
            cardObject.Add(new Card("R8"));
            cardObject.Add(new Card("R9"));
            cardObject.Add(new Card("R10"));
            cardObject.Add(new Card("KA"));
            cardObject.Add(new Card("KK"));
            cardObject.Add(new Card("KQ"));
            cardObject.Add(new Card("KJ"));
            cardObject.Add(new Card("K7"));
            cardObject.Add(new Card("K8"));
            cardObject.Add(new Card("K9"));
            cardObject.Add(new Card("K10"));
        }

        /// <summary>
        /// Shuffle de array volgens de fisher-yates methode.
        /// </summary>
        /// <typeparam name="T">Array kaarten.</typeparam>
        /// <param name="array">Array kaarten om te shufflen.</param>
        public static T[] Shuffle<T>(T[] array)
        {
            var random = _random;
            for (int i = array.Length; i > 1; i--)
            {
                // Pick random element to swap.
                int j = random.Next(i); // 0 <= j <= i-1
                // Swap.
                T tmp = array[j];
                array[j] = array[i - 1];
                array[i - 1] = tmp;
            }
            return array;
        }

        /// <summary>
        /// deelt kaarten uit aan de players
        /// </summary>
        /// <param name="players">aantal players</param>
        public void dealCards(int players)
        {
            Random r = new Random();
            kaartenList = new List<Card>(cardObject);
            kaartenRandom = new List<Card>();
            String values;

            for (int i = 0; i < 32; i++)
            {
                int temp = r.Next(0, kaartenList.Count);
                kaartenRandom.Add(kaartenList[temp]);
                kaartenList.RemoveAt(temp);
            }

            for (int i = 1, length = new Random().Next(1, 10); i < length; i++)
            {
                kaartenRandom = new List<Card>(Shuffle(kaartenRandom.ToArray()));
            }
            
            for (int i = 1; i <= players; i++)
            {
                for (int rand = 0; rand < 4; rand++)
                {
                    values = kaartenRandom[rand] + ".png";
                    //p.allCards(values);
                    this.players["Player" + i].setPlayerCard(kaartenRandom[rand]);
                    Console.WriteLine(values);
                    //p.changeCardImage(rand, values);
                    kaartenRandom.RemoveAt(rand);
                }
            }
        }

        /// <summary>
        /// Deelt nog een keer kaarten uit aan de spelers die vuile was hebben
        /// </summary>
        public void dealExtraCards()
        {
            String values;

            for (int rand = 0; rand < 4; rand++)
            {
                values = kaartenRandom[rand] + ".png";
                Console.WriteLine(values);
                //p.changeCardImage(rand, values);
                kaartenRandom.RemoveAt(rand);
            }
        }

        /// <summary>
        /// Checked of er wel of geen vuile was is
        /// </summary>
        /// <param name="card1">Kaart 1</param>
        /// <param name="card2">Kaart 2</param>
        /// <param name="card3">Kaart 3</param>
        /// <param name="card4">Kaart 4</param>
        /// <returns></returns>
        public Boolean checkVuileWas(String card1, String card2, String card3, String card4)
        {
            Console.WriteLine(card1 + " - " + card2 + " - " + card3 + " - " + card4);
            //if (cardObject.Contains(card1) && cardObject.Contains(card2) && cardObject.Contains(card3) && cardObject.Contains(card4))
            //{
            //    countVuileWasKaart++;
            //}
            //else
            //{
            //    wrong++;
            //}
            Console.WriteLine(countVuileWasKaart);
            switch (countVuileWasKaart)
            {
                case 0: return false;
                case 1: return true;
                case 2: return false;
                default: return false;
            }
        }
    }
}
