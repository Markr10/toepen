using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;
using toepenTest.Json;
using toepenTest.Connection;
using System.Text.RegularExpressions;

namespace toepenTest
{
    class Game
    {
        private static Random _random = new Random(); // geeft hopelijk nog meer random kaarten

        private Dictionary<String, Player> players;
        private List<Card> cardObjects;
        private List<Card> kaartenRandom;
        private List<Card> kaartenList;
        //private int countVuileWasKaart = 0;
        private int turn;
        private int nextPlayerNumber;
        private int trick;
        private int round;
        private string firstColorOfCard;
        private HashSet<int> notReceivedDirtyLaundry;
        private string[] dirtyLaundry = { "HA", "HK", "HQ", "HJ", "H7", "SA", "SK", "SQ", 
                                        "SJ", "S7", "KA", "KK", "KQ", "KJ", "K7", "RA", 
                                        "RK", "RQ", "RJ", "R7" };


        /// <summary>
        /// Constructor, roept de methodes aan om kaarten aan te maken, players toe te voegen en kaarten te delen
        /// </summary>
        /// <param name="numberOfPlayers">Het aantal spelers</param>
        public Game(int numberOfPlayers)
        {
            cardObjects = new List<Card>();
            AddCardObjects();
            
            AddPlayers(numberOfPlayers);

            notReceivedDirtyLaundry = new HashSet<int>();
            ResetTurn();

            round = 0;
            trick = 0;

            nextPlayerNumber = 1;
            
            // Server.cs starts first round
            Conn.GetServer().CheckCardEvent += new CheckCardEventHandler(CheckPlayedCard);
        }


        /// <summary>
        /// Voegt spelers toe aan de dictionary players
        /// </summary>
        public void AddPlayers(int numberOfPlayers)
        {
            players = new Dictionary<string, Player>();

            for (int i = 1; i <= numberOfPlayers; i++)
            {
                string playerId = "Player" + i;
                string playerName = "speler " + i;
                players.Add(playerId, new Player(playerName, (i - 1)));
            }
        }

        /// <summary>
        /// Voegt kaart objecten toe aan een list
        /// </summary>
        public void AddCardObjects()
        {
            cardObjects.Add(new Card("HA"));
            cardObjects.Add(new Card("HK"));
            cardObjects.Add(new Card("HQ"));
            cardObjects.Add(new Card("HJ"));
            cardObjects.Add(new Card("H7"));
            cardObjects.Add(new Card("H8"));
            cardObjects.Add(new Card("H9"));
            cardObjects.Add(new Card("H10"));
            cardObjects.Add(new Card("SA"));
            cardObjects.Add(new Card("SK"));
            cardObjects.Add(new Card("SQ"));
            cardObjects.Add(new Card("SJ"));
            cardObjects.Add(new Card("S7"));
            cardObjects.Add(new Card("S8"));
            cardObjects.Add(new Card("S9"));
            cardObjects.Add(new Card("S10"));
            cardObjects.Add(new Card("RA"));
            cardObjects.Add(new Card("RK"));
            cardObjects.Add(new Card("RQ"));
            cardObjects.Add(new Card("RJ"));
            cardObjects.Add(new Card("R7"));
            cardObjects.Add(new Card("R8"));
            cardObjects.Add(new Card("R9"));
            cardObjects.Add(new Card("R10"));
            cardObjects.Add(new Card("KA"));
            cardObjects.Add(new Card("KK"));
            cardObjects.Add(new Card("KQ"));
            cardObjects.Add(new Card("KJ"));
            cardObjects.Add(new Card("K7"));
            cardObjects.Add(new Card("K8"));
            cardObjects.Add(new Card("K9"));
            cardObjects.Add(new Card("K10"));
        }

        /// <summary>
        /// Shuffle de array volgens de fisher-yates methode.
        /// </summary>
        /// <typeparam name="T">Array kaarten.</typeparam>
        /// <param name="array">Array kaarten om te shufflen.</param>
        public static T[] Shuffle<T>(T[] array)
        {
            var random = _random;
            for (int i = array.Length; i > 1; i--)
            {
                // Pick random element to swap.
                int j = random.Next(i); // 0 <= j <= i-1
                // Swap.
                T tmp = array[j];
                array[j] = array[i - 1];
                array[i - 1] = tmp;
            }
            return array;
        }

        /// <summary>
        /// Deelt kaarten uit aan de players
        /// </summary>
        public void DealCards()
        {
            Random r = new Random();
            kaartenList = new List<Card>(cardObjects);
            kaartenRandom = new List<Card>();

            for (int i = 0; i < 32; i++)
            {
                int temp = r.Next(0, kaartenList.Count);
                kaartenRandom.Add(kaartenList[temp]);
                kaartenList.RemoveAt(temp);
            }

            for (int i = 1, length = new Random().Next(1, 10); i < length; i++)
            {
                kaartenRandom = new List<Card>(Shuffle(kaartenRandom.ToArray()));
            }

            foreach (Player player in players.Values)
            {
                DealCardsPlayer(player);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        //

        /// <summary>
        /// Deelt nieuwe kaarten uit aan de speler die vuile was had.
        /// Wanneer er geen nieuwe kaarten zijn behoud de speler zijn kaarten.
        /// </summary>
        /// <param name="player">De speler aan wie de kaarten moeten worden uitgedeeld</param>
        /// <returns>Of het mogelijk was de speler nieuwe kaarten te geven</returns>
        public bool DealExtraCards(Player player)
        {
            if (kaartenRandom.Count >= 4)
            {
                DealCardsPlayer(player);
                return true;
            }
            else
            {
                return false;
            }
        }

        private void DealCardsPlayer(Player player)
        {
            // TODO send reset event in case of dirty laundry
            player.ResetCards();

            for (int i = 3; i >= 0; i--)
            {
                Console.WriteLine(kaartenRandom[i] + ".png");
                //p.allCards(values);
                player.SetCard(kaartenRandom[i]);
                kaartenRandom.RemoveAt(i);
            }
        }

        /// <summary>
        /// Check for dirty laundry
        /// </summary>
        /// <param name="checkDirtyLaundry">True or false</param>
        /// <param name="clientId">The player</param>
        public void CheckDirtyLaundry(bool checkDirtyLaundry, int clientId)
        {
            Player player = players["Player" + (clientId + 1)];

            Conn.GetServer().SendMessageDirtyLaundry(checkDirtyLaundry, player);

            if (checkDirtyLaundry == true)
            {
                // Give the player, if possible, new cards and
                // send if there are no new cards a corresponding message to all players
                bool hasNewCards = DealExtraCards(player);
                Conn.GetServer().SendExtraCards(hasNewCards, player);
                if (!hasNewCards)
                {
                    Conn.GetServer().SendNoCardsAvailable();
                }
            }
            else
            {
                notReceivedDirtyLaundry.Remove(clientId);

                if (notReceivedDirtyLaundry.Count == 0)
                {
                    Conn.GetServer().CheckDirtyLaundryEvent -= new CheckDirtyLaundryEventHandler(CheckDirtyLaundry);
                }
            }
        }

        ///// <summary>
        ///// Checked of er wel of geen vuile was is
        ///// </summary>
        ///// <param name="card1">Kaart 1</param>
        ///// <param name="card2">Kaart 2</param>
        ///// <param name="card3">Kaart 3</param>
        ///// <param name="card4">Kaart 4</param>
        ///// <returns></returns>
        //public bool CheckDirtyLaundry(String card1, String card2, String card3, String card4)
        //{
        //    Console.WriteLine(card1 + " - " + card2 + " - " + card3 + " - " + card4);
        //    //if (cardObject.Contains(card1) && cardObject.Contains(card2) && cardObject.Contains(card3) && cardObject.Contains(card4))
        //    //{
        //    //    countVuileWasKaart++;
        //    //}
        //    //else
        //    //{
        //    //    wrong++;
        //    //}
        //    //Console.WriteLine(countVuileWasKaart);
        //    //switch (countVuileWasKaart)
        //    //{
        //    //    case 0: return false;
        //    //    case 1: return true;
        //    //    case 2: return false;
        //    //    default: return false;
        //    //}
        //    //TODO veranderen
        //    return false;
        //}

        /// <summary>
        /// The card that has been played
        /// </summary>
        /// <param name="card">The card</param>
        /// <param name="clientId">The client who has played the card</param>
        public void CheckPlayedCard(string card, int clientId)
        {
            // Zorg voor de juiste player naam
            clientId++;

            // turn is clientId die aan de beurt is
            if (clientId == turn)
            {
                String cardString = card.Split('.')[0];
                Console.WriteLine("cardString > " + cardString);

                // Check if the player must play another card. This is the case when
                // the first player has played a card and the color is not equal to the first played card color and
                // the player has a card that matches the first played card color
                if (firstColorOfCard != null && !firstColorOfCard.Equals(card.ToString().Substring(0, 1)))
                {
                    foreach (Card currentCard in players["Player" + clientId].GetCards())
                    {
                        if (firstColorOfCard.Equals(currentCard.ToString().Substring(0, 1)))
                        {
                            // player must play another card
                            Conn.GetServer().SendPlayedCardValid((clientId - 1), false, -1);
                            return;
                        }
                    }
                }

                // Try to remove the card from the player.
                int oldCardIndex = players["Player" + clientId].RemoveCard(cardString);
                if (oldCardIndex == -1)
                {
                    throw new ArgumentException("Server received invalid card");
                }

                if (firstColorOfCard == null)
                {
                    firstColorOfCard = players["Player" + clientId].GetLastPlayedCard().ToString().Substring(0, 1);
                }

                // send confirm message
                Conn.GetServer().SendPlayedCardValid((clientId - 1), true, oldCardIndex);
                // send card to all players
                Conn.GetServer().SendCardToOtherPlayers(card, (clientId - 1));
                NextTurn();
            }
            else
            {
                throw new ArgumentException("Server received a card for a player who is not on turn.");
            }
        }

        /// <summary>
        /// Set the next turn
        /// </summary>
        public void NextTurn()
        {
            // increase turn and check it
            if ((++turn) <= 4)
            {
                if (trick != 1)
                {
                    nextPlayerNumber = (nextPlayerNumber % players.Count) + 1;
                }
                
                // send turn message to next player
                Conn.GetServer().SendPlayerTurn(players["Player" + nextPlayerNumber]);
            }
            else
            {
                // Next trick
                NextTrick();
                ResetTurn();
            }
        }

        /// <summary>
        /// Set een nieuwe slag
        /// </summary>
        public void NextTrick()
        {
            Conn.GetServer().SendStartNewTrick();

            // increase trick and check it
            if ((++trick) <= 4)
            {
                // TODO check
                if (trick != 1 && round != 1)
                {
                    calculateWinner();
                }
                // send message to to clean cards
                NextTurn();
            }
            else
            {
                // Next round
                trick = 0;
                NextRound();
            }
        }

        /// <summary>
        /// Set the game for the next round
        /// </summary>
        public void NextRound()
        {
            round++;

            // send the latest score to the players
            Conn.GetServer().SendScoreToAll(players.Values, round);

            if (round != 1)
            {
                //calculatePoints();
                Conn.GetServer().SendMessageWinner(false, players["Player" + nextPlayerNumber]);
            }

            Conn.GetServer().SendStartNewRound();

            // TODO Check if working
            foreach (Player player in players.Values)
            {
                notReceivedDirtyLaundry.Add(player.GetClientId());
            }
            Conn.GetServer().CheckDirtyLaundryEvent += new CheckDirtyLaundryEventHandler(CheckDirtyLaundry);
            DealCards();
            Conn.GetServer().SendCards(players.Values);
            
            NextTrick();
        }

        /// <summary>
        /// Resets the turns
        /// </summary>
        private void ResetTurn()
        {
            turn = 0;
            firstColorOfCard = null;
        }

        /// <summary>
        /// Get the player names 
        /// </summary>
        /// <returns>The player names</returns>
        public string[] GetPlayerNames()
        {
            string[] playerNames = new string[players.Count];
            for (int i = 1; i <= players.Count(); i++)
            {
                playerNames[i - 1] = players["Player" + i].GetName();
            }
            return playerNames;
        }

        public Dictionary<String, Player> GetPlayers()
        {
            return players;
        }

        /// <summary>
        /// Check the color of the card
        /// </summary>
        /// <param name="cardColor">Card color</param>
        /// <param name="colorCard"></param>
        public void checkColor(bool cardColor, string colorCard)
        {
            for (int i = 1; i <= players.Count(); i++)
            {

                if (colorCard != "0")
                {

                }
                else
                {
                    cardColor = false;
                }
            }
        }

        /// <summary>
        /// Calculate
        /// </summary>
        public void calculateWinner()
        {
            //TODO remove next line
            calculatePoints();
        }
        
        /// <summary>
        /// Het berekenen van de punten die zijn behaald
        /// </summary>
        public void calculatePoints()
        {
            string numberCard = String.Empty;
            bool cardColor;
            int highestScore = 0;
            int points;
            // Kleur bepalen van gespeelde kaart
            foreach (Player player in players.Values)
            {
                points = 0;
                string colorCard = player.GetLastPlayedCard().ToString().Substring(0, 1);

                // Hoogte bepalen
                if (firstColorOfCard == colorCard)
                {
                    cardColor = true;
                }
                else
                {
                    cardColor = false;
                    //player.IncreasePenaltyPoints();
                }

                if (cardColor == true)
                {
                    points = player.GetLastPlayedCard().GetPoints();
                    Console.WriteLine("Punten Player " + player.GetClientId() + "> " + points + " Kaart-> " + player.GetLastPlayedCard());
                    if (points > highestScore)
                    {
                        nextPlayerNumber = player.GetClientId() + 1;
                        Console.WriteLine(player.GetClientId() + " heeft nu de hoogste score! -> " + points);
                        highestScore = points;
                    }
                }
                else
                {
                    points = 0;
                    Console.WriteLine("Punten Player " + player.GetClientId() + "> geen punten, Kaart-> " + player.GetLastPlayedCard());
                }
            }

            // Na de loop om de punten te tellen
            Console.WriteLine("Winner --> " + nextPlayerNumber);
            //Conn.GetServer().SendPlayerTurn(players["Player" + winnerNumber]);
        }
    }
}
