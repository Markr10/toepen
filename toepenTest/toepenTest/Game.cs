using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;
using toepenTest.Json;
using toepenTest.Connection;
using System.Text.RegularExpressions;

namespace toepenTest
{
    class Game
    {
        private Dictionary<String, Player> players;
        private static Random _random = new Random();
        private List<Card> cardObjects;
        //private int countVuileWasKaart = 0;

        private List<Card> kaartenRandom;
        private List<Card> kaartenList;

        int turn;
        int round;
        string firstPlayer;
        string typeCard;


        /// <summary>
        /// Constructor, roept de methodes aan om kaarten aan te maken, players toe te voegen en kaarten te delen
        /// </summary>
        /// <param name="numberOfPlayers">Het aantal spelers</param>
        public Game(int numberOfPlayers)
        {
            cardObjects = new List<Card>();
            AddCardObjects();
            
            AddPlayers(numberOfPlayers);

            DealCards();
            firstPlayer = "Player1";
            round = 0;
            ResetTurn();
            Conn.GetServer().CheckCardEvent += new CheckCardEventHandler(CheckPlayedCard);
        }

        /// <summary>
        /// Voegt spelers toe aan de dictionary players
        /// </summary>
        public void AddPlayers(int numberOfPlayers)
        {
            players = new Dictionary<string, Player>();

            for (int i = 1; i <= numberOfPlayers; i++)
            {
                string playerId = "Player" + i;
                players.Add(playerId, new Player(playerId, (i - 1)));
            }
        }

        /// <summary>
        /// Voegt kaart objecten toe aan een list
        /// </summary>
        public void AddCardObjects()
        {
            cardObjects.Add(new Card("HA"));
            cardObjects.Add(new Card("HK"));
            cardObjects.Add(new Card("HQ"));
            cardObjects.Add(new Card("HJ"));
            cardObjects.Add(new Card("H7"));
            cardObjects.Add(new Card("H8"));
            cardObjects.Add(new Card("H9"));
            cardObjects.Add(new Card("H10"));
            cardObjects.Add(new Card("SA"));
            cardObjects.Add(new Card("SK"));
            cardObjects.Add(new Card("SQ"));
            cardObjects.Add(new Card("SJ"));
            cardObjects.Add(new Card("S7"));
            cardObjects.Add(new Card("S8"));
            cardObjects.Add(new Card("S9"));
            cardObjects.Add(new Card("S10"));
            cardObjects.Add(new Card("RA"));
            cardObjects.Add(new Card("RK"));
            cardObjects.Add(new Card("RQ"));
            cardObjects.Add(new Card("RJ"));
            cardObjects.Add(new Card("R7"));
            cardObjects.Add(new Card("R8"));
            cardObjects.Add(new Card("R9"));
            cardObjects.Add(new Card("R10"));
            cardObjects.Add(new Card("KA"));
            cardObjects.Add(new Card("KK"));
            cardObjects.Add(new Card("KQ"));
            cardObjects.Add(new Card("KJ"));
            cardObjects.Add(new Card("K7"));
            cardObjects.Add(new Card("K8"));
            cardObjects.Add(new Card("K9"));
            cardObjects.Add(new Card("K10"));
        }

        /// <summary>
        /// Shuffle de array volgens de fisher-yates methode.
        /// </summary>
        /// <typeparam name="T">Array kaarten.</typeparam>
        /// <param name="array">Array kaarten om te shufflen.</param>
        public static T[] Shuffle<T>(T[] array)
        {
            var random = _random;
            for (int i = array.Length; i > 1; i--)
            {
                // Pick random element to swap.
                int j = random.Next(i); // 0 <= j <= i-1
                // Swap.
                T tmp = array[j];
                array[j] = array[i - 1];
                array[i - 1] = tmp;
            }
            return array;
        }

        /// <summary>
        /// Deelt kaarten uit aan de players
        /// </summary>
        public void DealCards()
        {
            Random r = new Random();
            kaartenList = new List<Card>(cardObjects);
            kaartenRandom = new List<Card>();
            String values;

            for (int i = 0; i < 32; i++)
            {
                int temp = r.Next(0, kaartenList.Count);
                kaartenRandom.Add(kaartenList[temp]);
                kaartenList.RemoveAt(temp);
            }

            for (int i = 1, length = new Random().Next(1, 10); i < length; i++)
            {
                kaartenRandom = new List<Card>(Shuffle(kaartenRandom.ToArray()));
            }
            
            for (int i = 1; i <= players.Count; i++)
            {
                for (int rand = 0; rand < 4; rand++)
                {
                    values = kaartenRandom[rand] + ".png";
                    //p.allCards(values);
                    players["Player" + i].SetCard(kaartenRandom[rand]);
                    kaartenRandom.RemoveAt(rand);
                }
            }
        }

        /// <summary>
        /// Deelt nog een keer kaarten uit aan de spelers die vuile was hebben
        /// </summary>
        public void DealExtraCards()
        {
            String values;

            for (int rand = 0; rand < 4; rand++)
            {
                values = kaartenRandom[rand] + ".png";
                Console.WriteLine(values);
                //p.changeCardImage(rand, values);
                kaartenRandom.RemoveAt(rand);
            }
        }

        /// <summary>
        /// Checked of er wel of geen vuile was is
        /// </summary>
        /// <param name="card1">Kaart 1</param>
        /// <param name="card2">Kaart 2</param>
        /// <param name="card3">Kaart 3</param>
        /// <param name="card4">Kaart 4</param>
        /// <returns></returns>
        public Boolean CheckDirtyLaundry(String card1, String card2, String card3, String card4)
        {
            Console.WriteLine(card1 + " - " + card2 + " - " + card3 + " - " + card4);
            //if (cardObject.Contains(card1) && cardObject.Contains(card2) && cardObject.Contains(card3) && cardObject.Contains(card4))
            //{
            //    countVuileWasKaart++;
            //}
            //else
            //{
            //    wrong++;
            //}
            //Console.WriteLine(countVuileWasKaart);
            //switch (countVuileWasKaart)
            //{
            //    case 0: return false;
            //    case 1: return true;
            //    case 2: return false;
            //    default: return false;
            //}
            //TODO veranderen
            return false;
        }

        /// <summary>
        /// The card that has been played
        /// </summary>
        /// <param name="card">The card</param>
        /// <param name="clientId">The client who has played the card</param>
        public void CheckPlayedCard(String card, int clientId)
        {
            // Zorg voor de juiste player naam
            clientId++;

            // turn is clientId die aan de beurt is
            if (clientId == turn)
            {
                String cardString = card.Split('.')[0];
                Console.WriteLine("cardString > " + cardString);

                // check if the first player has played a card and color equals first played card color
                if (typeCard != null && typeCard.Equals(card.ToString().Substring(0, 1)))
                {
                    // Try to remove the card from the player.
                    if (!players["Player" + clientId].RemoveCard(cardString))
                    {
                        throw new ArgumentException("Server received invalid card");
                    }
                }
                else if (typeCard != null && !typeCard.Equals(card.ToString().Substring(0, 1)))
                {
                    foreach (Card currentCard in players["Player" + clientId].GetCards())
                    {
                        if (typeCard.Equals(currentCard.ToString().Substring(0, 1)))
                        {
                            // player must play another card
                            // TODO replace with other method
                            Conn.GetServer().SendPlayerTurn(players["Player" + turn]);
                            return;
                        }
                    }
                    players["Player" + clientId].RemoveCard(cardString);
                }
                else if (players["Player" + clientId].RemoveCard(cardString))
                {
                    typeCard = players[firstPlayer].GetLastPlayedCard().ToString().Substring(0, 1);
                }
                else
                {
                    throw new ArgumentException("Server received invalid card");
                }
                // send card to all players
                Conn.GetServer().SendCardToOtherPlayers(card, (clientId -1));
                NextTurn();
            }
            else
            {
                throw new ArgumentException("Server received a card for a player who is not on turn.");
            }
        }

        public void NextRound()
        {
            Conn.GetServer().SendCards(players);
            NextTick();
        }

        public void NextTick()
        {
            NextTurn();
        }

        public void NextTurn()
        {
            if ((++turn) <= 4)
            {
                // send message to next player
                Conn.GetServer().SendPlayerTurn(players["Player" + turn]);
            }
            else
            {
                calculatePoints(turn);
                ResetTurn();
                NextTick();
                // bepalen van strafpunten per speler
                // foreach player {
                // checkCards() <-- loop voor elke speler
                // }
                if (round == 0)
                {
                    // in array zetten voor elke speler
                    // int playerstrafpunten[i]["punten"];
                }
                else
                {
                    // optellen bij huidige stand
                }

                // winnende speler heeft eerste zet in nieuwe ronde
                //firstPlayer = "Player0";

                // volgende ronde

            }
        }
        private void ResetTurn()
        {
            turn = 0;
            typeCard = null;
        }

        public void CheckRound()
        {

        }

        public void CheckCards()
        {



            // speler 1
            // welke kaart

            //checkColor();


            // speler 2
            // welke kaart

            // speler 3
            // welke kaart

            // speler 4
            // welke kaart

        }

        public string[] GetPlayerIDs()
        {
            string[] playerIDs = new string[players.Count];
            for (int i = 1; i <= players.Count(); i++)
            {
                playerIDs[i - 1] = players["Player" + i].GetName();
            }
            return playerIDs;
        }

        public Dictionary<String, Player> GetPlayers()
        {
            return players;
        }

        public void checkColor(bool cardColor, string colorCard)
        {
            for (int i = 1; i <= players.Count(); i++)
            {

                if (colorCard != "0")
                {

                }
                else
                {
                    cardColor = false;
                }
            }
        }
        public void calculatePoints(int turn)
        {

            string firstColorCard = String.Empty;
            string numberCard = String.Empty;
            bool cardColor;

            int points;

            // Kleur bepalen eerste kaart
            if (turn == 1)
            {
                firstColorCard = players["Player" + firstPlayer].GetLastPlayedCard().ToString().Substring(0, 1);
            }

            // Kleur bepalen van gespeelde kaart
            foreach (Player player in players.Values)
            {
                string colorCard = player.GetLastPlayedCard().ToString().Substring(0, 1);

                // Hoogte bepalen
                if (firstColorCard == colorCard)
                {
                    cardColor = true;
                }
                else
                {
                    cardColor = false;
                }

                if (cardColor == true)
                {
                    points = players["Player" + turn].GetLastPlayedCard().GetPoints();
                    Console.WriteLine("Punten -> " + points);
                }
                else
                {
                    points = 0;
                    Console.WriteLine("Punten -> " + points);
                }
            }
        }
    }
}

