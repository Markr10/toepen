using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Resources;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;

namespace toepenTest
{
    class Game
    {
        private Dictionary<String, Player> players;
        private Player player1;
        private Player player2;
        private Player player3;
        private Player player4;
        private List<Card> testing;
        private int countVuileWasKaart = 0;
        private int wrong;
        private MainWindow p;
        private Card card;

        private ArrayList kaartenRandom;
        private ArrayList kaartenList;

        public Game(MainWindow p)
        {
            players = new Dictionary<string, Player>();
            testing = new List<Card>();
            this.p = p;
            addCard();
            //addPlayer();
            dealCards(4);
            addPlayers();
        }

        public void addPlayers()
        {
            player1 = new Player("Player1");
            player2 = new Player("Player2");
            player3 = new Player("Player3");
            player4 = new Player("Player4");

            players.Add("Player1", player1);
            players.Add("Player2", player2);
            players.Add("Player3", player3);
            players.Add("Player4", player4);
        }

        public void addCard()
        {
            testing.Add(new Card("HA"));
            testing.Add(new Card("HK"));
            testing.Add(new Card("HQ"));
            testing.Add(new Card("HJ"));
            testing.Add(new Card("H7"));
            testing.Add(new Card("H8"));
            testing.Add(new Card("H9"));
            testing.Add(new Card("H10"));
            testing.Add(new Card("SA"));
            testing.Add(new Card("SK"));
            testing.Add(new Card("SQ"));
            testing.Add(new Card("SJ"));
            testing.Add(new Card("S7"));
            testing.Add(new Card("S8"));
            testing.Add(new Card("S9"));
            testing.Add(new Card("S10"));
            testing.Add(new Card("RA"));
            testing.Add(new Card("RK"));
            testing.Add(new Card("RQ"));
            testing.Add(new Card("RJ"));
            testing.Add(new Card("R7"));
            testing.Add(new Card("R8"));
            testing.Add(new Card("R9"));
            testing.Add(new Card("R10"));
            testing.Add(new Card("KA"));
            testing.Add(new Card("KK"));
            testing.Add(new Card("KQ"));
            testing.Add(new Card("KJ"));
            testing.Add(new Card("K7"));
            testing.Add(new Card("K8"));
            testing.Add(new Card("K9"));
            testing.Add(new Card("K10"));
        }

        public void dealCards(int players)
        {
            Random r = new Random();
            kaartenList = new ArrayList(testing);
            kaartenRandom = new ArrayList();
            String values;

            for (int i = 0; i < 32; i++)
            {
                int temp = r.Next(0, kaartenList.Count);
                kaartenRandom.Add(kaartenList[temp]);
                kaartenList.RemoveAt(temp);
            }

            for (int i = 0; i < players; i++)
            {
                for (int rand = 0; rand < 4; rand++)
                {
                    values = kaartenRandom[rand] + ".png";
                    Console.WriteLine(values);
                    p.changeCardImage(rand, values);
                    kaartenRandom.RemoveAt(rand);
                }
            }
        }

        public void dealExtraCards()
        {
            String values;

            for (int rand = 0; rand < 4; rand++)
            {
                values = kaartenRandom[rand] + ".png";
                Console.WriteLine(values);
                p.changeCardImage(rand, values);
                kaartenRandom.RemoveAt(rand);
            }
        }

        public Boolean checkVuileWas(String card1, String card2, String card3, String card4)
        {
            Console.WriteLine(card1 + " - " + card2 + " - " + card3 + " - " + card4);
            //if (testing.Contains(card1) && testing.Contains(card2) && testing.Contains(card3) && testing.Contains(card4))
            //{
            //    countVuileWasKaart++;
            //}
            //else
            //{
            //    wrong++;
            //}
            Console.WriteLine(countVuileWasKaart);
            switch (countVuileWasKaart)
            {
                case 0: return false;
                case 1: return true;
                case 2: return false;
                default: return false;
            }
        }
    }
}
